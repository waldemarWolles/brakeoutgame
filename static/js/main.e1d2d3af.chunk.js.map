{"version":3,"sources":["BrakeOut/Collision.js","BrakeOut/Draw.js","BrakeOut/Parameters.jsx","sounds/gameOver.wav","sounds/gameWin.ogg","sounds/objectHit.wav","sounds/bg_music.mp3","sounds/platformHit.wav","sounds/lifeDecreasing.wav","BrakeOut/BrakeOut.jsx","App.js","index.js"],"names":["Collision","canvas","ballParam","platformParam","brickParam","playerParam","bricks","objectHit","platformHit","lifeDecreasing","r","row","c","col","b","status","x","radius","width","y","height","dy","score","play","dx","lives","speed","collisionPoint","angle","Math","PI","sin","cos","Draw","ctx","beginPath","arc","fillStyle","fill","rect","strokeRect","strokeStyle","color","fillRect","strokeColor","font","fillText","level","Parameters","offSetLeft","offSetTop","marginTop","fillColor","maxLevel","name","gameOver","game","rightPressed","leftPressed","document","addEventListener","e","key","startGame","BrakeOut","canvasRef","useRef","useEffect","current","getContext","gameOverSound","getElementById","winGameSound","volume","bg_music","createBricks","render","clearRect","isLevelDone","requestAnimationFrame","pause","id","ref","src","App","className","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.e1d2d3af.chunk.js","sourcesContent":["\r\nconst Collision = (canvas, ballParam, platformParam, brickParam, playerParam, bricks,\r\n    objectHit, platformHit, lifeDecreasing) => {\r\n\r\n    // Bricks Collision\r\n    for (let r = 0; r < brickParam.row; r++) {\r\n        for (let c = 0; c < brickParam.col; c++) {\r\n            let b = bricks[r][c];\r\n            //if the brick isn't broken\r\n            if (b.status) {\r\n                if (ballParam.x + ballParam.radius > b.x && ballParam.x - ballParam.radius < b.x + brickParam.width &&\r\n                    ballParam.y + ballParam.radius > b.y && ballParam.y - ballParam.radius < b.y + brickParam.height) {\r\n                    ballParam.dy = - ballParam.dy;\r\n                    b.status = false; // brick is broken\r\n                    playerParam.score += 10;\r\n                    objectHit.play();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Bouncing ball from the left and right walls\r\n    if (ballParam.x + ballParam.radius > canvas.width || ballParam.x - ballParam.radius < 0) {\r\n        ballParam.dx *= -1;\r\n\r\n    }\r\n    // Bouncing ball from the top and bottom walls\r\n    if (ballParam.y - ballParam.radius < 0) {\r\n        ballParam.dy *= -1;\r\n\r\n\r\n    } else if (ballParam.y + ballParam.radius > canvas.height) {\r\n        playerParam.lives--;\r\n        lifeDecreasing.play();\r\n\r\n        //reset Ball\r\n        ballParam.x = canvas.width / 2;\r\n        ballParam.y = platformParam.y - ballParam.radius;\r\n        ballParam.dx = ballParam.speed;\r\n        ballParam.dy = -ballParam.speed;\r\n\r\n    }\r\n\r\n\r\n    //Platform walls collision\r\n    if (platformParam.x < 10) {\r\n        platformParam.x = 10;\r\n    } else if (platformParam.x + platformParam.width > canvas.width - 10) {\r\n        platformParam.x = (canvas.width - 10 - platformParam.width);\r\n    }\r\n\r\n    //Ball and platform collision\r\n    if (ballParam.x > platformParam.x &&\r\n        ballParam.x < platformParam.x + platformParam.width &&\r\n        platformParam.y < platformParam.y + platformParam.height &&\r\n        ballParam.y + ballParam.radius > platformParam.y - platformParam.height / 2\r\n    ) {\r\n\r\n        platformHit.play();\r\n        //Cheking ball and platform hitting location\r\n        let collisionPoint = ballParam.x - (platformParam.x + platformParam.width / 2);\r\n\r\n        //Normalize value\r\n        collisionPoint = collisionPoint / (platformParam.width / 2);\r\n\r\n        //Calculate the angle of the ball\r\n        let angle = collisionPoint * (Math.PI / 3); // Math.PI / 3 = 60 degrees\r\n\r\n        ballParam.dx = ballParam.speed * Math.sin(angle);\r\n        ballParam.dy = -ballParam.speed * Math.cos(angle);\r\n    }\r\n};\r\n\r\nexport default Collision;","\r\nconst Draw = (ctx, ballParam, platformParam, brickParam, playerParam, bricks) => {\r\n\r\n   // let brickss = bricks;\r\n\r\n    // Drawing a ball\r\n    ctx.beginPath();\r\n    ctx.arc(ballParam.x, ballParam.y, ballParam.radius, 0, Math.PI * 2);\r\n    ctx.fillStyle = 'white'\r\n    ctx.fill();\r\n\r\n    // Drawing a platform\r\n    ctx.beginPath();\r\n    ctx.rect(platformParam.x, platformParam.y, platformParam.width, platformParam.height);\r\n    ctx.strokeRect(platformParam.x, platformParam.y, platformParam.width, platformParam.height);\r\n    ctx.strokeStyle = 'blue';\r\n    ctx.fillStyle = platformParam.color;\r\n    ctx.fill();\r\n\r\n\r\n    //Drawing bricks\r\n    for (let r = 0; r < brickParam.row; r++) {\r\n        for (let c = 0; c < brickParam.col; c++) {\r\n            let b = bricks[r][c];\r\n            //if the brick isn't broken\r\n            if (b.status) {\r\n                ctx.fillStyle = '#251172';\r\n                ctx.fillRect(b.x, b.y, brickParam.width, brickParam.height);\r\n\r\n                ctx.strokeStyle = brickParam.strokeColor;\r\n                ctx.strokeRect(b.x, b.y, brickParam.width, brickParam.height);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Draw user interface\r\n    ctx.font = \"20px serif\";\r\n    ctx.fillStyle = playerParam.color;\r\n    ctx.fillText(`Score: ${playerParam.score}`, 10, 50);\r\n\r\n    ctx.font = \"20px serif\";\r\n    ctx.fillStyle = playerParam.color;\r\n    ctx.fillText(`Level: ${playerParam.level}`, 350, 50);\r\n\r\n\r\n    ctx.font = \"20px serif\";\r\n    ctx.fillStyle = playerParam.color;\r\n    ctx.fillText(`Lives: ${playerParam.lives}`, 670, 50);\r\n};\r\n\r\nexport default Draw;","export const Parameters = {\r\n    platformParam: {\r\n        width: 200,\r\n        height: 10,\r\n        x: 300,\r\n        y: 0,\r\n        color: 'silver',\r\n        speed: 10,\r\n    },\r\n\r\n    ballParam: {\r\n        x: 20,\r\n        y: 100,\r\n        speed: 8,\r\n        radius: 10,\r\n        dx: 5,\r\n        dy: -5\r\n    },\r\n\r\n    brickParam: {\r\n        row: 1,\r\n        col: 10,\r\n        height: 15,\r\n        width: 75,\r\n        offSetLeft: 10,\r\n        offSetTop: 20,\r\n        marginTop: 40,\r\n        fillColor: 'purple', \r\n        strokeColor: \"white\", \r\n    },\r\n\r\n    playerParam: {\r\n        lives: 5,\r\n        level: 1,\r\n        maxLevel: 5,\r\n        score: 0,\r\n        name: 'Player',\r\n        color: 'white'\r\n    },\r\n}","export default __webpack_public_path__ + \"static/media/gameOver.307dd9f1.wav\";","export default __webpack_public_path__ + \"static/media/gameWin.35972233.ogg\";","export default __webpack_public_path__ + \"static/media/objectHit.7e46bccf.wav\";","export default __webpack_public_path__ + \"static/media/bg_music.6fb56bd9.mp3\";","export default __webpack_public_path__ + \"static/media/platformHit.892a81dc.wav\";","export default __webpack_public_path__ + \"static/media/lifeDecreasing.e2573f40.wav\";","import React, { useEffect, useRef } from 'react';\r\nimport './../App.css';\r\nimport Collision from './Collision';\r\nimport Draw from './Draw';\r\nimport { Parameters } from './Parameters';\r\nimport gameOverSound from './../sounds/gameOver.wav';\r\nimport winGameSound from './../sounds/gameWin.ogg';\r\nimport objectHit from './../sounds/objectHit.wav';\r\nimport bg_music from './../sounds/bg_music.mp3';\r\nimport platformHit from './../sounds/platformHit.wav';\r\nimport lifeDecreasing from './../sounds/lifeDecreasing.wav';\r\n\r\nconst { ballParam, platformParam, brickParam, playerParam } = Parameters;\r\n\r\nlet bricks = [];\r\nlet gameOver = false;\r\nlet game = false;\r\nlet rightPressed = false;\r\nlet leftPressed = false;\r\n\r\n// Platform controls\r\nconst keyDownHandler = (e) => {\r\n    if (e.key === 'ArrowLeft' || e.key === \"Left\") {\r\n        leftPressed = true;\r\n        // platformParam.x -= 8;\r\n    } else if (e.key === 'ArrowRight' || e.key === \"Right\") {\r\n        rightPressed = true;\r\n        // platformParam.x += 8;\r\n    } else if (e.key === 'Enter') {\r\n        startGame();\r\n    }\r\n}\r\n\r\nconst keyUpHandler = (e) => {\r\n    if (e.key === \"Right\" || e.key === \"ArrowRight\") {\r\n        rightPressed = false;\r\n    }\r\n    else if (e.key === \"Left\" || e.key === \"ArrowLeft\") {\r\n        leftPressed = false;\r\n    }\r\n}\r\n\r\ndocument.addEventListener('keyup', keyUpHandler);\r\ndocument.addEventListener('keydown', keyDownHandler);\r\n\r\n\r\n// Starting game condition\r\nconst startGame = () => {\r\n    game = true;\r\n}\r\n\r\n\r\nconst BrakeOut = () => {\r\n\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        platformParam.y = canvas.height - 30;\r\n        ballParam.x = canvas.width / 2;\r\n        ballParam.y = platformParam.y - ballParam.radius * 10;\r\n\r\n        // Sounds\r\n        const gameOverSound = document.getElementById('gameOverSound');\r\n        const winGameSound = document.getElementById('winGameSound');\r\n        const objectHit = document.getElementById('objectHit');\r\n        objectHit.volume = .5;\r\n        const bg_music = document.getElementById('bg_music');\r\n        bg_music.volume = .5;\r\n        const platformHit = document.getElementById('platformHit');\r\n        platformHit.volume = 0.2;\r\n        const lifeDecreasing = document.getElementById('lifeDecreasing');\r\n        lifeDecreasing.volume = 0.1;\r\n\r\n\r\n        // Creating bricks\r\n        const createBricks = () => {\r\n            brickParam.width = canvas.width / 10 - 11;\r\n            for (let r = 0; r < brickParam.row; r++) {\r\n                bricks[r] = [];\r\n                for (let c = 0; c < brickParam.col; c++) {\r\n                    bricks[r][c] = {\r\n                        x: c * (brickParam.offSetLeft + brickParam.width) + brickParam.offSetLeft,\r\n                        y: r * (brickParam.offSetTop + brickParam.height) + brickParam.offSetTop + brickParam.marginTop,\r\n                        status: true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        createBricks();\r\n\r\n\r\n\r\n        function render() {\r\n\r\n\r\n            const gameOverSoundPlay = () => {\r\n                gameOverSound.play();\r\n            };\r\n            const winGameSoundPlay = () => {\r\n                winGameSound.play();\r\n            };\r\n\r\n\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // Drawing\r\n            Draw(ctx, ballParam, platformParam, brickParam, playerParam, bricks);\r\n\r\n            // Collisions\r\n            Collision(\r\n                canvas, ballParam, platformParam,\r\n                brickParam, playerParam, bricks,\r\n                objectHit, platformHit, lifeDecreasing);\r\n\r\n\r\n\r\n\r\n            //Level Up\r\n            let isLevelDone = true;\r\n\r\n            // check if all the bricks are broken\r\n            for (let r = 0; r < brickParam.row; r++) {\r\n                for (let c = 0; c < brickParam.col; c++) {\r\n                    isLevelDone = isLevelDone && !bricks[r][c].status;\r\n                }\r\n            }\r\n\r\n            if (isLevelDone) {\r\n                if (playerParam.level >= playerParam.maxLevel) {\r\n                    winGameSoundPlay();\r\n                    ctx.font = \"50px serif\";\r\n                    ctx.fillStyle = playerParam.color;\r\n                    ctx.fillText(`You Win`, canvas.width / 2 - 100, canvas.height / 2 - 100);\r\n                    ctx.fillText(`Press F5 to play again`, canvas.width / 2 - 200, canvas.height / 2 - 250);\r\n                    gameOver = true;\r\n\r\n                }\r\n                brickParam.row++;\r\n                createBricks();\r\n                ballParam.speed += 0.5;\r\n                //reset Ball\r\n                ballParam.x = canvas.width / 2;\r\n                ballParam.y = platformParam.y - ballParam.radius;\r\n                ballParam.dx = ballParam.speed;\r\n                ballParam.dy = -ballParam.speed;\r\n\r\n                playerParam.level++;\r\n            }\r\n\r\n\r\n            //Ball movement\r\n            if (game) {\r\n                ballParam.x += ballParam.dx;\r\n                ballParam.y += ballParam.dy;\r\n            } else if (!game) {\r\n                ctx.font = \"50px serif\";\r\n                ctx.fillStyle = playerParam.color;\r\n                ctx.fillText(`Press Enter to start`, canvas.width / 2 - 200, canvas.height / 2 - 100);\r\n            }\r\n\r\n\r\n\r\n\r\n            //Platform movement\r\n\r\n            if (rightPressed) {\r\n                platformParam.x += platformParam.speed;\r\n            }\r\n            if (leftPressed) {\r\n                platformParam.x -= platformParam.speed;\r\n            }\r\n\r\n\r\n\r\n\r\n            // Game Over\r\n            if (playerParam.lives <= 0) {\r\n                gameOverSoundPlay();\r\n                ctx.font = \"50px serif\";\r\n                ctx.fillStyle = playerParam.color;\r\n\r\n                ctx.fillText(`Game Over`, canvas.width / 2 - 100, canvas.height / 2 - 100);\r\n                ctx.fillText(`Press F5 to play again`, canvas.width / 2 - 200, canvas.height / 2 - 250);\r\n\r\n                gameOver = true;\r\n\r\n            }\r\n\r\n\r\n            if (!gameOver) {\r\n                if (game) {\r\n                    bg_music.play();\r\n                }\r\n                requestAnimationFrame(render);\r\n            }\r\n\r\n            if (gameOver) {\r\n                bg_music.pause();\r\n            }\r\n\r\n        }\r\n        render();\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <canvas id='canvas' ref={canvasRef} width='750' height='800'></canvas>\r\n            <audio id='gameOverSound' src={gameOverSound}></audio>\r\n            <audio id='winGameSound' src={winGameSound}></audio>\r\n            <audio id='objectHit' src={objectHit}></audio>\r\n            <audio id='bg_music' src={bg_music}></audio>\r\n            <audio id='platformHit' src={platformHit}></audio>\r\n            <audio id='lifeDecreasing' src={lifeDecreasing}></audio>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BrakeOut;","import './App.css';\nimport BrakeOut from './BrakeOut/BrakeOut';\n\n\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrakeOut />\n    \n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}